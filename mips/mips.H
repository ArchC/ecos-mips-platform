/******************************************************
 * Architecture Module header file.                   *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  _MIPS_H
#define  _MIPS_H

#include "mips_parms.H"
#include "systemc.h"
#include "ac_module.H"
#include "ac_utils.H"
#include "mips_arch.H"
#include "mips_isa.H"
#include "mips_syscall.H"
#include "ac_tlm_intr_port.H"
#include "mips_intr_handlers.H"


class mips: public ac_module, public mips_arch {
private:
  sc_time time_1cycle;
  sc_time time_4cycle;

public:

  bool has_delayed_load;
  char* delayed_load_program;
  mips_parms::mips_isa ISA;
  mips_intp_handler intp_hnd;
  ac_tlm_intr_port intp;

  //!Address of Interpretation Routines.
  void** IntRoutine;

  unsigned* ins_cache;
  bool start_up;

  //!Dispatch Method.
  inline __attribute__((always_inline)) void* dispatch();

  //!Behavior execution method.
  void behavior();

  SC_HAS_PROCESS( mips );

  sc_event wake;

  //!Constructor.
  mips( sc_module_name name_ ): 
    ac_module(name_), 
    mips_arch(), 
    ISA(*this), 
    intp_hnd(*this),
    intp("intp", intp_hnd) 
  {
    SC_THREAD( behavior );
    sensitive << wake;
    has_delayed_load = false; 
    start_up=1;
    id.write(globalId++);
    set_proc_freq(1000/module_period_ns);
  }

  void set_proc_freq(unsigned int proc_freq);

  unsigned get_ac_pc();

  void set_ac_pc( unsigned int value );

  virtual void PrintStat();

  void init(int ac, char* av[]);

  void init();

  void set_prog_args();

  void load(char* program);

  void delayed_load(char* program);

  void stop(int status = 0);

  virtual ~mips() {};

};
#endif  //_MIPS_H

