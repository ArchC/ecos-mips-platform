/******************************************************
 * Instruction Set Architecture header file.          *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef _MIPS_ISA_H
#define _MIPS_ISA_H

#include "mips_parms.H"
#include "ac_instr.H"
#include "ac_decoder_rt.H"
#include "ac_instr_info.H"
#include "mips_arch.H"
#include "mips_arch_ref.H"
#include "mips_syscall.H"

namespace mips_parms
{
class mips_isa: public mips_arch_ref {
private:
typedef ac_instr<AC_DEC_FIELD_NUMBER> ac_instr_t;

public:
  static ac_dec_field fields[AC_DEC_FIELD_NUMBER];
  static ac_dec_format formats[AC_DEC_FORMAT_NUMBER];
  static ac_dec_list dec_list[AC_DEC_LIST_NUMBER];
  static ac_dec_instr instructions[AC_DEC_INSTR_NUMBER];
  static const ac_instr_info instr_table[AC_DEC_INSTR_NUMBER + 1];

  static const unsigned instr_format_table[AC_DEC_INSTR_NUMBER + 1];

  ac_decoder_full* decoder;

  mips_syscall syscall;
  int cur_instr_id;


    #include "mips_isa_helper.H"
  
  //!Constructor.
  mips_isa(mips_arch& ref) : mips_arch_ref(ref) , syscall(ref) {
    //!Building Decoder.
    decoder = ac_decoder_full::CreateDecoder(mips_isa::formats, mips_isa::instructions, &ref);
  }

  inline const char* get_name() { return instr_table[cur_instr_id].ac_instr_name; }
  inline const char* get_mnemonic() { return instr_table[cur_instr_id].ac_instr_mnemonic; }
  inline unsigned get_size() { return instr_table[cur_instr_id].ac_instr_size; };
  inline unsigned get_cycles() { return instr_table[cur_instr_id].ac_instr_cycles; };
  inline unsigned get_min_latency() { return instr_table[cur_instr_id].ac_instr_min_latency; };
  inline unsigned get_max_latency() { return instr_table[cur_instr_id].ac_instr_max_latency; };

  inline __attribute__((always_inline)) void _behavior_instruction(uint8_t op);

  inline __attribute__((always_inline)) void _behavior_begin();
  inline __attribute__((always_inline)) void _behavior_end();

  inline __attribute__((always_inline)) void _behavior_mips_Type_R(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void _behavior_mips_Type_I(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void _behavior_mips_Type_J(uint8_t op, uint32_t addr);
  inline __attribute__((always_inline)) void _behavior_mips_Type_S(uint8_t op, uint32_t code, uint8_t func);

  inline __attribute__((always_inline)) void behavior_lb(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lbu(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lh(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lhu(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lw(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lwl(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lwr(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sb(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sh(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sw(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_swl(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_swr(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_addi(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_addiu(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_slti(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sltiu(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_andi(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_ori(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_xori(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lui(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_add(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_addu(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sub(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_subu(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_slt(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sltu(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_instr_and(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_instr_or(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_instr_xor(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_instr_nor(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_nop(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sll(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_srl(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sra(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sllv(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_srlv(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_srav(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mult(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_multu(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_div(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_divu(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mfhi(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mthi(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mflo(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mtlo(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_j(uint8_t op, uint32_t addr);
  inline __attribute__((always_inline)) void behavior_jal(uint8_t op, uint32_t addr);
  inline __attribute__((always_inline)) void behavior_jr(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_jalr(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_beq(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bne(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_blez(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bgtz(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bltz(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bgez(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bltzal(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bgezal(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_instr_break(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sys_call(uint8_t op, uint32_t code, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sync(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_teq(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_ll(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sc(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_movz(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movn(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mul(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_clz(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_seb(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_seh(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_ext(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_rotr(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_rotrv(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_absd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_abss(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_addd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_adds(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_ceqd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_ceqs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_coled(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_coles(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_coltd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_colts(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cueqd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cueqs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_culed(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cules(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cultd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cults(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cund(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cuns(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cvtsd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cvtds(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cvtdw(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_cvtsw(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_divd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_divs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mfc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_muld(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_muls(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mtc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_negd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_negs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_subd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_subs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_truncwd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_truncws(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_bc1tl(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bc1t(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bc1f(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_bc1fl(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sdc1(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_ldc1(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_swc1(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_lwc1(uint8_t op, uint8_t rs, uint8_t rt, int16_t imm);
  inline __attribute__((always_inline)) void behavior_sqrtd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sqrts(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movf(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movt(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_maddd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_msubd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movzd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movnd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movtd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movfd(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_madds(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_msubs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movns(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movts(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movfs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_movzs(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mfhc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_mthc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_ldxc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_sdxc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_lwxc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);
  inline __attribute__((always_inline)) void behavior_swxc1(uint8_t op, uint8_t rs, uint8_t rt, uint8_t rd, uint8_t shamt, uint8_t func);

};
};



#endif //_MIPS_ISA_H

