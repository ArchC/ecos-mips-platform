/******************************************************
 * Processor Module Implementation File.              *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#include  "mips.H"
#include  "mips_isa.cpp"

#include  "mips_syscall.H"

void* mips::dispatch() {
  //!Updating Regs for behavioral simulation.
  if (ac_qk.need_sync()) {
    ac_qk.sync();
  }
  ac_instr_counter++;
  unsigned ins_id;
  bool exec = true;

  if (ac_pc < 0x100) {
    //!Handling System calls.
    switch( ac_pc ){
      #define AC_SYSC(NAME,LOCATION) \
      case LOCATION: \
        ISA.syscall.NAME(); \
        exec = false; \
        return IntRoutine[0]; \
      break;
      #include <ac_syscall.def>
      #undef AC_SYSC

    } // switch( ac_pc )
  } // if( ac_pc < 0x100 )

  if (exec) {
    decode_pc = ac_pc;
    quant = 0;
    ins_cache = (ISA.decoder)->Decode(reinterpret_cast<unsigned char*>(buffer), quant);
    ins_id = ins_cache ? ins_cache[IDENT]: 0;

    if( ins_id == 0 ) {
      cerr << "ArchC Error: Unidentified instruction. " << endl;
      cerr << "PC = " << hex << ac_pc << dec << endl;
      stop();
      longjmp(ac_env, AC_ACTION_STOP);
    }

    ISA.cur_instr_id = ins_id;
  } // if (exec)
  return IntRoutine[ins_id];
}

void mips::behavior() {

  void* vet[] = {&&I_Init, &&I_lb, &&I_lbu, &&I_lh, &&I_lhu, 
              &&I_lw, &&I_lwl, &&I_lwr, &&I_sb, &&I_sh, 
              &&I_sw, &&I_swl, &&I_swr, &&I_addi, &&I_addiu, 
              &&I_slti, &&I_sltiu, &&I_andi, &&I_ori, &&I_xori, 
              &&I_lui, &&I_add, &&I_addu, &&I_sub, &&I_subu, 
              &&I_slt, &&I_sltu, &&I_instr_and, &&I_instr_or, &&I_instr_xor, 
              &&I_instr_nor, &&I_nop, &&I_sll, &&I_srl, &&I_sra, 
              &&I_sllv, &&I_srlv, &&I_srav, &&I_mult, &&I_multu, 
              &&I_div, &&I_divu, &&I_mfhi, &&I_mthi, &&I_mflo, 
              &&I_mtlo, &&I_j, &&I_jal, &&I_jr, &&I_jalr, 
              &&I_b, &&I_beq, &&I_bne, &&I_blez, &&I_bgtz, 
              &&I_bltz, &&I_bgez, &&I_bltzal, &&I_bgezal, &&I_instr_break, 
              &&I_sys_call, &&I_eret, &&I_deret, &&I_cache, &&I_sync, 
              &&I_teq, &&I_ll, &&I_sc, &&I_movz, &&I_movn, 
              &&I_mul, &&I_clz, &&I_seb, &&I_seh, &&I_ext, 
              &&I_rotr, &&I_rotrv, &&I_absd, &&I_abss, &&I_addd, 
              &&I_adds, &&I_ceqd, &&I_ceqs, &&I_coled, &&I_coles, 
              &&I_coltd, &&I_colts, &&I_cueqd, &&I_cueqs, &&I_culed, 
              &&I_cules, &&I_cultd, &&I_cults, &&I_cund, &&I_cuns, 
              &&I_cvtsd, &&I_cvtds, &&I_cvtdw, &&I_cvtsw, &&I_divd, 
              &&I_divs, &&I_mfc1, &&I_movd, &&I_movs, &&I_muld, 
              &&I_muls, &&I_mtc1, &&I_negd, &&I_negs, &&I_subd, 
              &&I_subs, &&I_truncwd, &&I_truncws, &&I_bc1tl, &&I_bc1t, 
              &&I_bc1f, &&I_bc1fl, &&I_sdc1, &&I_ldc1, &&I_swc1, 
              &&I_lwc1, &&I_sqrtd, &&I_sqrts, &&I_movf, &&I_movt, 
              &&I_maddd, &&I_msubd, &&I_movzd, &&I_movnd, &&I_movtd, 
              &&I_movfd, &&I_madds, &&I_msubs, &&I_movns, &&I_movts, 
              &&I_movfs, &&I_movzs, &&I_mfhc1, &&I_mthc1, &&I_ldxc1, 
              &&I_sdxc1, &&I_lwxc1, &&I_swxc1, &&I_mfc0, &&I_mtc0};

  IntRoutine = vet;

  if (has_delayed_load) {
    DM_mport.load(delayed_load_program);
    ac_pc = ac_start_addr;
    has_delayed_load = false;
  }

  int action = setjmp(ac_env);
  if (action == AC_ACTION_STOP) return;

  I_Init:
    goto *dispatch();

  I_lb: // Instruction lb
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lb(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lbu: // Instruction lbu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lbu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lh: // Instruction lh
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lh(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lhu: // Instruction lhu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lhu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lw: // Instruction lw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwl: // Instruction lwl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lwl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwr: // Instruction lwr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lwr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sb: // Instruction sb
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sb(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sh: // Instruction sh
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sh(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sw: // Instruction sw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swl: // Instruction swl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_swl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swr: // Instruction swr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_swr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_addi: // Instruction addi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_addi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_addiu: // Instruction addiu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_addiu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_slti: // Instruction slti
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_slti(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sltiu: // Instruction sltiu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sltiu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_andi: // Instruction andi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_andi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ori: // Instruction ori
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_ori(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_xori: // Instruction xori
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_xori(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lui: // Instruction lui
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lui(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_add: // Instruction add
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_add(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_addu: // Instruction addu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_addu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_sub: // Instruction sub
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sub(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_subu: // Instruction subu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_subu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_slt: // Instruction slt
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_slt(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sltu: // Instruction sltu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sltu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_and: // Instruction instr_and
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_and(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_or: // Instruction instr_or
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_or(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_xor: // Instruction instr_xor
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_xor(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_nor: // Instruction instr_nor
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_nor(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_nop: // Instruction nop
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_nop(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sll: // Instruction sll
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sll(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srl: // Instruction srl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sra: // Instruction sra
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sra(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sllv: // Instruction sllv
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sllv(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srlv: // Instruction srlv
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srlv(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srav: // Instruction srav
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srav(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mult: // Instruction mult
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mult(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_multu: // Instruction multu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_multu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_div: // Instruction div
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_div(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(sc_time(module_period_ns*30, SC_NS));
    goto *dispatch();

  I_divu: // Instruction divu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_divu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(sc_time(module_period_ns*30, SC_NS));
    goto *dispatch();

  I_mfhi: // Instruction mfhi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mfhi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mthi: // Instruction mthi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mthi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mflo: // Instruction mflo
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mflo(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mtlo: // Instruction mtlo
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mtlo(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_j: // Instruction j
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_J(ins_cache[1], ins_cache[8]);
    ISA.behavior_j(ins_cache[1], ins_cache[8]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jal: // Instruction jal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_J(ins_cache[1], ins_cache[8]);
    ISA.behavior_jal(ins_cache[1], ins_cache[8]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jr: // Instruction jr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_jr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jalr: // Instruction jalr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_jalr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_b: // Instruction b
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_b(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_beq: // Instruction beq
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_beq(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bne: // Instruction bne
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bne(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_blez: // Instruction blez
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_blez(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgtz: // Instruction bgtz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgtz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bltz: // Instruction bltz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bltz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgez: // Instruction bgez
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgez(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bltzal: // Instruction bltzal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bltzal(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgezal: // Instruction bgezal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgezal(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_break: // Instruction instr_break
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_break(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sys_call: // Instruction sys_call
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_S(ins_cache[1], ins_cache[9], ins_cache[6]);
    ISA.behavior_sys_call(ins_cache[1], ins_cache[9], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_eret: // Instruction eret
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_S(ins_cache[1], ins_cache[9], ins_cache[6]);
    ISA.behavior_eret(ins_cache[1], ins_cache[9], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_deret: // Instruction deret
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_S(ins_cache[1], ins_cache[9], ins_cache[6]);
    ISA.behavior_deret(ins_cache[1], ins_cache[9], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cache: // Instruction cache
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_cache(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sync: // Instruction sync
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sync(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_teq: // Instruction teq
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_teq(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ll: // Instruction ll
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_ll(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sc: // Instruction sc
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sc(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movz: // Instruction movz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movn: // Instruction movn
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movn(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mul: // Instruction mul
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mul(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_clz: // Instruction clz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_clz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_seb: // Instruction seb
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_seb(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_seh: // Instruction seh
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_seh(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ext: // Instruction ext
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_ext(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_rotr: // Instruction rotr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_rotr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_rotrv: // Instruction rotrv
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_rotrv(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_absd: // Instruction absd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_absd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_abss: // Instruction abss
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_abss(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_addd: // Instruction addd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_addd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_adds: // Instruction adds
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_adds(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ceqd: // Instruction ceqd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_ceqd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ceqs: // Instruction ceqs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_ceqs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_coled: // Instruction coled
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_coled(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_coles: // Instruction coles
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_coles(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_coltd: // Instruction coltd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_coltd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_colts: // Instruction colts
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_colts(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cueqd: // Instruction cueqd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cueqd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cueqs: // Instruction cueqs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cueqs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_culed: // Instruction culed
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_culed(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cules: // Instruction cules
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cules(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cultd: // Instruction cultd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cultd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cults: // Instruction cults
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cults(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cund: // Instruction cund
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cund(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cuns: // Instruction cuns
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cuns(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cvtsd: // Instruction cvtsd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cvtsd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cvtds: // Instruction cvtds
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cvtds(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cvtdw: // Instruction cvtdw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cvtdw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_cvtsw: // Instruction cvtsw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_cvtsw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_divd: // Instruction divd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_divd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_divs: // Instruction divs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_divs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mfc1: // Instruction mfc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mfc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movd: // Instruction movd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movs: // Instruction movs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_muld: // Instruction muld
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_muld(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_muls: // Instruction muls
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_muls(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mtc1: // Instruction mtc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mtc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_negd: // Instruction negd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_negd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_negs: // Instruction negs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_negs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_subd: // Instruction subd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_subd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_subs: // Instruction subs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_subs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_truncwd: // Instruction truncwd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_truncwd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_truncws: // Instruction truncws
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_truncws(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bc1tl: // Instruction bc1tl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bc1tl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bc1t: // Instruction bc1t
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bc1t(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bc1f: // Instruction bc1f
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bc1f(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bc1fl: // Instruction bc1fl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bc1fl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sdc1: // Instruction sdc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sdc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ldc1: // Instruction ldc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_ldc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swc1: // Instruction swc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_swc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwc1: // Instruction lwc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lwc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sqrtd: // Instruction sqrtd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sqrtd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sqrts: // Instruction sqrts
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sqrts(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movf: // Instruction movf
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movf(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movt: // Instruction movt
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movt(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_maddd: // Instruction maddd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_maddd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_msubd: // Instruction msubd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_msubd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movzd: // Instruction movzd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movzd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movnd: // Instruction movnd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movnd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movtd: // Instruction movtd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movtd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movfd: // Instruction movfd
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movfd(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_madds: // Instruction madds
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_madds(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_msubs: // Instruction msubs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_msubs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movns: // Instruction movns
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movns(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movts: // Instruction movts
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movts(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movfs: // Instruction movfs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movfs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_movzs: // Instruction movzs
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_movzs(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mfhc1: // Instruction mfhc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mfhc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mthc1: // Instruction mthc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mthc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ldxc1: // Instruction ldxc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_ldxc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sdxc1: // Instruction sdxc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sdxc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwxc1: // Instruction lwxc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_lwxc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swxc1: // Instruction swxc1
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_swxc1(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mfc0: // Instruction mfc0
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_C(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[10], ins_cache[11]);
    ISA.behavior_mfc0(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[10], ins_cache[11]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mtc0: // Instruction mtc0
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips_Type_C(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[10], ins_cache[11]);
    ISA.behavior_mtc0(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[10], ins_cache[11]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

} // behavior()

#include <ac_sighandlers.H>

void mips::init() {

#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << endl << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();
  start_up = 0;
  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
  set_running();
}

void mips::init(int ac, char *av[]) {

  args_t args = ac_init_args( ac, av);
  set_args(args.size, args.app_args);
  DM_mport.load(args.app_filename);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << endl << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();
  start_up = 0;
  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
  set_running();
}

void mips::set_prog_args(){
  ISA.syscall.set_prog_args(argc, argv);
}

//Stop simulation (may receive exit status)
void mips::stop(int status) {
  cerr << endl << "ArchC: -------------------- Simulation Finished --------------------" << endl;
  ISA._behavior_end();
  ac_stop_flag = 1;
  ac_exit_status = status;
  set_stopped();
  longjmp(ac_env, AC_ACTION_STOP);
}

void mips::load(char* program) {
  DM_mport.load(program);
}

void mips::delayed_load(char* program) {
  has_delayed_load = true;
  delayed_load_program = new char[strlen(program)];
  strcpy(delayed_load_program, program);
}

// Returns ac_pc value
unsigned mips::get_ac_pc() {
  return ac_pc;
}

// Assigns value to ac_pc
void mips::set_ac_pc(unsigned int value) {
  ac_pc = value;
}

// Wrapper function to PrintStat().
void mips::PrintStat() {
  ac_arch<mips_parms::ac_word, mips_parms::ac_Hword>::PrintStat();
}

// Assigns value to processor frequency and updates cycle time values
void mips::set_proc_freq(unsigned int proc_freq) {
  ac_module::set_proc_freq(proc_freq);
  time_1cycle=sc_time(1*module_period_ns, SC_NS);
  time_4cycle=sc_time(4*module_period_ns, SC_NS);
}

